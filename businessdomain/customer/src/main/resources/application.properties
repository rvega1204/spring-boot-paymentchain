# Specifies the Config Server's URL for importing configurations.
# The "optional:" prefix ensures the application can start even if the Config Server is unavailable.
spring.config.import=optional:configserver:http://localhost:8888

# Name of the configuration file to be fetched from the Config Server.
# This corresponds to the repository's filename without the extension (e.g., config-client.properties or .yml).
spring.cloud.config.name=config-client

# Profile to be used when fetching configurations from the Config Server.
# This determines which set of configurations is fetched (e.g., local, dev, prod).
spring.cloud.config.profile=local

# Activates the specified profile for the application's runtime environment.
# This controls which properties or beans are loaded, based on the profile (e.g., local, dev, prod).
spring.profiles.active=local


# Name of the application in the Spring context, useful for service discovery and logging
spring.application.name=businessdomain-customer
# URL of the Eureka server for service registration and discovery
# Uses an environment variable EUREKA_SERVER or defaults to http://localhost:8761/eureka
eureka.client.serviceUrl.defaultZone=${EUREKA_SERVER:http://localhost:8761/eureka}

# Enables this application to register itself with the Eureka server
eureka.client.register-with-eureka=true

# Enables health check for the application, allowing Eureka to monitor its health status
eureka.client.healtcheck.enabled=true

# Enables fetching the registry of other services from the Eureka server
eureka.client.fetch-registry=true

# Disables the Spring Cloud Config client.
# This prevents the application from trying to fetch configuration from a Config Server.
spring.cloud.config.enabled=true

# Exposes all management endpoints (e.g., health, metrics, etc.) via HTTP.
# Use caution in production environments, as this may expose sensitive information.
management.endpoints.web.exposure.include=*

server.servlet.context-path=/business